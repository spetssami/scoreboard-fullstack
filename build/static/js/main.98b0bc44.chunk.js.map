{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","scores","value","isSortedHigh","handleChange","bind","handleSubmit","arrangeScores","name","score","fetch","method","headers","body","JSON","stringify","res","json","data","this","setState","console","log","then","arranged","sort","a","b","event","target","split","submitScore","preventDefault","className","onSubmit","placeholder","onChange","onClick","map","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"4RAoFeA,G,wDAhFb,aAAc,IAAD,8BACX,gBACKC,MAAQ,CACXC,OAAQ,GACRC,MAAO,GACPC,cAAc,GAGhB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKE,cAAgB,EAAKA,cAAcF,KAAnB,gBAVV,E,iGAaKG,EAAMC,G,yFACNC,MAAM,qCAAsC,CAC1DC,OAAQ,OACRC,QAAS,CACP,OAAU,mBACV,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAACP,OAAMC,Y,cAN1BO,E,gBAQeA,EAAIC,O,OAAjBC,E,OACNC,KAAKC,SAAS,CAACnB,OAAQiB,IACvBG,QAAQC,IAAIJ,G,mJAGO,IAAD,OAClBR,MAAM,kCACLa,MAAK,SAAAP,GAAG,OAAIA,EAAIC,UAChBM,MAAK,SAAAL,GAAI,OAAI,EAAKE,SAAS,CAAEnB,OAAQiB,S,sCAItC,IAAIjB,EAASkB,KAAKnB,MAAMC,OAClBuB,EAAYL,KAAKnB,MAAMG,aAAeF,EAAOwB,MAAK,SAACC,EAAEC,GAAH,OAAUA,EAAElB,MAAMiB,EAAEjB,SAAUR,EAAOwB,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAEjB,MAAMkB,EAAElB,SACvHU,KAAKC,SAAS,CAACjB,cAAegB,KAAKnB,MAAMG,eACzCgB,KAAKC,SAAS,CAACnB,OAAQuB,M,mCAGZI,GACXT,KAAKC,SAAS,CAAClB,MAAO0B,EAAMC,OAAO3B,U,mCAGxB0B,GACX,IACMV,EADQC,KAAKnB,MAAME,MACN4B,MAAM,KACnBtB,EAAMU,EAAK,GACXT,EAAQS,EAAK,GACnBC,KAAKY,YAAYvB,EAAMC,GACvBmB,EAAMI,mB,+BAIN,IAAM/B,EAASkB,KAAKnB,MAAMC,OAC1B,OACE,yBAAKgC,UAAU,OACb,0CACA,0BAAMC,SAAUf,KAAKb,cACnB,oEACA,2BAAO6B,YAAY,iBAAiB3B,KAAK,WAAW4B,SAAUjB,KAAKf,eACnE,qDAEF,4BAAQiC,QAASlB,KAAKZ,eAAtB,eACA,+BACE,4BACE,oCACA,sCAEDN,EAAOqC,KAAI,SAAA7B,GAAK,OACf,4BACE,4BAAKA,EAAMD,MAAU,4BAAKC,EAAMA,iB,GAxE5B8B,IAAMC,YCSJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpC,QAAQoC,MAAMA,EAAMC,c","file":"static/js/main.98b0bc44.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css'\n\nclass App extends React.Component {\n  constructor(){\n    super();\n    this.state = { \n      scores: [],\n      value: \"\",\n      isSortedHigh: true\n    }\n\n    this.handleChange = this.handleChange.bind(this)\n    this.handleSubmit = this.handleSubmit.bind(this)\n    this.arrangeScores = this.arrangeScores.bind(this)\n  }\n\n  async submitScore(name, score){\n  const res = await fetch(\"http://localhost:8080/api/newScore\", {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({name, score})\n    })\n    const data = await res.json()\n    this.setState({scores: data})\n    console.log(data);\n  }\n\n  componentDidMount() {\n    fetch(\"http://localhost:8080/api/data\")\n    .then(res => res.json())\n    .then(data => this.setState({ scores: data }))\n  }\n\n  arrangeScores() {\n    let scores = this.state.scores;\n    const arranged = (this.state.isSortedHigh ? scores.sort((a,b) => (b.score-a.score)) : scores.sort((a, b) => (a.score-b.score)))\n    this.setState({isSortedHigh: !this.state.isSortedHigh})\n    this.setState({scores: arranged});\n  }\n\n  handleChange(event){\n    this.setState({value: event.target.value})\n  }\n\n  handleSubmit(event){\n    const value = this.state.value\n    const data = value.split(\",\")\n    const name= data[0]\n    const score = data[1]\n    this.submitScore(name, score)\n    event.preventDefault();\n  }\n\n  render() {\n    const scores = this.state.scores\n    return (\n      <div className=\"App\">\n        <h1>Scoreboard</h1>\n        <form onSubmit={this.handleSubmit}>\n          <p>Name and score separated with a comma</p>\n          <input placeholder=\"E.g. Mike, 500\" name=\"newScore\" onChange={this.handleChange}/>\n          <button>Submit new score</button>\n        </form>\n        <button onClick={this.arrangeScores}>Sort scores</button>\n        <table>\n          <tr>\n            <th>Name</th>\n            <th>Score</th>\n          </tr>\n          {scores.map(score => (\n            <tr>\n              <td>{score.name}</td><td>{score.score}</td>\n            </tr>\n          ))}\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}